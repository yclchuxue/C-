C++ 笔记

泛型算法
××××××××××××××××××××××××
为了实现与数据结构的分离，为了实现通用性，算法根本就不知道容器的存在。
算法访问数据的唯一通道是迭代器。是否改变容器大小，完全是迭代器的选择
和责任。当我们向 fill_n 传递 back_inserter 时，虽然最终效果是向
容器添加了新元素，但对 fill_n 来说，根本不知道这回事儿。它仍然像往
常一样（通过迭代器）向元素赋予新值，只不过这次是通过 back_inserter
来赋值，而 back_inserter 选择将新值添加到了容器而已。
××××××××××××××××××××××××

1. find(iter_1, iter_2, val)                //在迭代器iter_1到iter_2之间寻找值val，
                                            //找到则返回一个指向val的迭代器，否则返回
                                            //第儿个参数

2. count(iter_1, iter_2, val)               //在迭代器iter_1到iter_2之间统计值val出
                                            //现的次数，并返回出现的次数，如果没有出现
                                            //则为0

3. accumulate(iter_1, iter_2, val)          //将迭代器iter_1到iter_2之间的所有值加到
                                            //val上，注意加是拼接的意思，例如是string
                                            //类型则运行结束后是一个所有string连接到一
                                            //起的一个string,返回一个val同内型的值。注
                                            //意val一定要支持'+'运算

4. equal(iter_1, iter_2, iter)              //iter_1和iter_2是第一个容器的迭代器，表
                                            //示范围，iter是第二个容器的迭代器，表示开
                                            //始位置，该算法判断，两个序列是否保存相同
                                            //的值，算法默认iter对应容器大于iter_1到
                                            //iter_2，返回0或1

5. fill(iter_1, iter_2, val)                //将迭代器iter_1到iter_2之间的所有值都改
                                            //为val

6. fill_n(iter_1, size, val)                //将从迭代器iter_1开始的size个元素的值改
                                            //为val

7. back_inserter(nums)                      //nums为容器名，该算法返回一个插入迭代器，
                                            //给该插入迭代器赋值相当于向该容器尾部添加
                                            //元素，但该容器必须支持push_back()

8. copy(iter_1, iter_2, iter)               //iter_1和iter_2是第一个容器的迭代器，表示
                                            //范围iter是第二个容器的迭代器，表示开始位置，
                                            //该算法将iter_1到iter_2之间的元素拷贝到iter
                                            //开始位置之后

9. replace(iter_1, iter_2, val_1, val_2)    //该算法将iter_1到iter_2之间的val_1全部
                                            //修改为val_2（在容器上修改）

10.replace_copy(iter_1, iter_2, iter, val_1, val_2)
                                            //将迭代器iter_1到iter_2之间的所有的值拷贝
                                            //到iter迭代器上，且该范围内的等于val_1的值
                                            //该为val_2，(原容器中不修改)，如果想拷贝到
                                            //一个空容器中，无法使用begin时可以使用插入迭
                                            //代器

11.unique(begin, end)                       //将迭代器范围内，相邻且相同的元素只留一个，
                                            //其他放到容器末尾，并返回指向第一个放到后面
                                            //去的元素的迭代器。可以配合sort排序函数和
                                            //erase删除来去重

12.sort(strs.begin(), strs.end())           //将strs按升序排序

13.sort(strs.begin(), strs.end(), isShorter)//按isSshorter中制定的规则排序(假设规则为按长
                                            //度排序)第三个参数为谓词

14.stable_sort(strs.begin(), strs.end())    //与sort一致

15.stable_sort(strs.begin(), strs.end(), isShorter)
                                            //按isSshorter中制定的规则排序，(假设规则为按
                                            //长度排序)长度相等的保持原顺序不变，第三个参数
                                            //为谓词

16.find_if(iter_1, iter_2, lambda)          //迭代器iter_1和iter_2表示范围，谓词lambda为
                                            //可调用表达式,将iter_1到iter_2中的元素依次带
                                            //入lambda中,直到返回值满足条件，lambda只能带
                                            //一个参数，即一元谓词

19.for_each(iter_1, iter_2, lambda)         //将迭代器iter_1到iter_2之间的所有值加依次带入
                                            //lambda中.

20.count_if(iter_1, iter_2, lambda)         //将迭代器iter_1到iter_2之间的所有值加依次带入
                                            //lambda中，返回条件为真的个数.lambda只能带
                                            //一个参数，即一元谓词

21.tansfrom(iter_1, iter_2, iter, lambda)   //前两个迭代器表示范围，第三个迭代器表示位置，将
                                            //iter_1到iter_2中所有元素带入lambda中，再输
                                            //出到iter中，iter可以与前两迭代器相同。

22.front_inserter(list)                     //list为一个容器，返回一个插入迭代器，给该插入
                                            //迭代器赋值相当于向该容器头部插入一个元素，该
                                            //容器必须支持push_front

23.inserter(list, iter)                     //list为一个容器，iter为指向该容器的一个迭代器，
                                            //返回一个插入迭代器，给该插入迭代器赋值相当于在
                                            //iter之前插入一个元素

24.unique_copy(iter_1, iter_2, iter)        //将迭代器iter_1到iter_2之间的相邻且相等的值去
                                            //重，将去重后的copy到iter中,iter可以是插入迭
                                            //代器

迭代器

1. 插入迭代器(泛型算法中有解释)

back_inserter, front_inserter, inserter

2. 流迭代器

istream_inserter<int> in_iter(is);              //in_iter从输入流is中读取类型为int的值
                                                //例如is未以读方式打开的文件或cin从键盘
                                                //输入（in_iter(cin)）

istream_inserter<int> eof;                      //表示尾后位置, 例while(in_iter != eof)
                                                //表示从键盘读取int型数据，直到EOF

*in_iter;                                       //返回从流中读取的值

in_iter++, ++in_iter;                           //从输入流中读取下一个值

ostream_inserter<int> out_iter(os);             //out_iter将类型为int的值写入到os中

ostream_inserter<int> out_iter(os, d);          //out_iter将类型为int的值写入到输出流os中
                                                //每个值后都要输出一个d， d指向一个空字符结
                                                //尾的字符数组

out_iter = val;                                 //用<<运算符将val写入到out_iter所绑定的
                                                //ostream中。（类型必须兼容）

3. 反向迭代器

nums.rbegin(), rend(), crbegin(), crend()

iter.base()                                     //将返回一个普通迭代器，返回的迭代器与iter相邻


动态内存
×××××××××××××××××××××××××××××××

×××××××××××××××××××××××××××××××
unique_ptr 性质：

1， 拥有他所指向的对象;

2,  同一时刻只有一个unique_ptr指向一个指定的对象;

3,  unique_ptr不支持拷贝和赋值， 但我们可以拷贝或赋值一个将要被销毁的uniqu_ptr，
    例如函数返回一个unique_ptr（实际上是赋值或拷贝）;

4,  利用reset或release操作将指针的所有权从一个unique_ptr转移到另一个unique_ptr;

5,  unique_ptr不支持拷贝和赋值但是初始化时可以使用普通指针初始化, 但如果普通指针不是
    new出的内存，在unique_ptr超出范围释放时会报错,即使new出的内存也会在unique_ptr
    释放时造成空悬指针;

weak_ptr 性质

1,  一种指向share_ptr的指针， 赋值时不会增加share_ptr的次数;

2,  当share_ptr释放时， weak_ptr所指对象也释放;




动态绑定和静态绑定--->博客[https://www.cnblogs.com/raichen/p/5622197.html]
×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
只有虚函数才使用的是动态绑定，其他的全部是静态绑定。


对象移动--->对一个对象使用了移动操作后（move）就必须保证后面不能再使用该对象
[https://zhuanlan.zhihu.com/p/55229582]
×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
右值引用-->必须绑定到右值的引用，例如：
    
    int i = 42;
    int &&r1 = i * 2;
    int &&r2 = std::move(i);         //move函数可以将左值转换为右值引用类型，但必须是std::move而不是move

所谓右值引用就是必须绑定到右值的引用，通过 && 获得。右值引用只能绑定到一个将要销毁的对象上，因此可以自由地移动其资源。
左值引用，也就是 “常规引用”，不能绑定到要转换的表达式、字面常量或返回右值的表达式。而右值引用恰好相反，可以绑定到这
类表达式，但不能绑定到一个左值上。返回左值的表达式包括：返回左值引用的函数及赋值、下标、解引用和前置递增/递减运算符；
返回右值的包括：返回非引用类型的函数及算数、关系、位和后置递增/递减运算符。可以看到，左值的特点是有持久的状态，而右
值则是短暂的。

noexcept 通知标准库我们的函数不抛出异常
例如：
StrVec::StrVec(StrVec &&s) noexcept :    {}


